stages:
  - build
  - test
  - deploy

# 클라이언트 빌드 작업
client-build:
  tags:
    - docker
  image: docker:latest
  stage: build
  services:
    - docker:dind
  before_script:
    - docker login -u $DOCKER_HUB_USERNAME -p $DOCKER_HUB_ACCESS_TOKEN
  script:
    - docker build -t $CLIENT_DOCKER_IMAGE ./damul-client
    - docker push $CLIENT_DOCKER_IMAGE
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^Client|client-develop|master$/'
      changes:
        - "damul-client/**/*"

# 서버 빌드 작업
server-build:
  tags:
    - docker
  image: docker:latest
  stage: build
  services:
    - docker:dind
  before_script:
    - docker login -u $DOCKER_HUB_USERNAME -p $DOCKER_HUB_ACCESS_TOKEN
  script:
    - docker build -t $SERVER_DOCKER_IMAGE ./damul-server
    - docker push $SERVER_DOCKER_IMAGE
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^Server|server-develop|master$/'
      changes:
        - "damul-server/**/*"

# 클라이언트 테스트 작업
client-test:
  tags:
    - docker
  stage: test
  image: node:16
  script:
    - cd damul-client
    - npm ci
    - npm run test
  rules:
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^Client|client-develop|master$/ && $CI_PIPELINE_SOURCE == "merge_request_event"'
      when: always
    - if: '$CI_COMMIT_BRANCH =~ /^Client|client-develop|master$/'
      changes:
        - "damul-client/**/*"

# 서버 테스트 작업
server-test:
  tags:
    - docker
  stage: test
  image: gradle:8.12-jdk17
  script:
    - cd damul-server
    - gradle clean test
  rules:
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^Server|server-develop|master$/ && $CI_PIPELINE_SOURCE == "merge_request_event"'
      when: always
    - if: '$CI_COMMIT_BRANCH =~ /^Server|server-develop|master$/'
      changes:
        - "damul-server/**/*"

# 배포 작업
deploy:
  tags:
    - docker
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" | base64 -d > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan -H $EC2_HOST >> ~/.ssh/known_hosts
  script:
    - |
      # Client 브랜치 배포: 클라이언트 컨테이너만 배포
      if [[ "$CI_COMMIT_BRANCH" == "Client" ]]; then
        ssh $EC2_USER@$EC2_HOST "
          cd /home/ubuntu/S12P11A306 &&
          docker pull $CI_REGISTRY_IMAGE/client:latest &&
          docker-compose -f docker-compose.prod.yml up -d server"
      fi

      # Server 브랜치 배포: 서버 컨테이너만 배포
      if [[ "$CI_COMMIT_BRANCH" == "Server" ]]; then
        ssh $EC2_USER@$EC2_HOST "
          cd /home/ubuntu/S12P11A306 &&
          docker pull $CI_REGISTRY_IMAGE/server:latest &&
          docker-compose -f docker-compose.prod.yml up -d server"
      fi

      # master 브랜치 배포: 클라이언트와 서버 컨테이너 모두 배포
      if [[ "$CI_COMMIT_BRANCH" == "master" ]]; then
        ssh $EC2_USER@$EC2_HOST "
          cd /home/ubuntu/S12P11A306 &&
          docker pull $CI_REGISTRY_IMAGE/server:latest &&
          docker-compose -f docker-compose.prod.yml up -d server"
      fi

      # master 브랜치 배포: 클라이언트와 서버 컨테이너 모두 배포
      if [[ "$CI_COMMIT_BRANCH" == "master" ]]; then
        ssh $EC2_USER@$EC2_HOST "
          cd /home/ubuntu/S12P11A306 &&
          docker pull $CI_REGISTRY_IMAGE/client:latest &&
          docker pull $CI_REGISTRY_IMAGE/server:latest &&
          docker-compose -f docker-compose.prod.yml up -d server"
      fi
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^Client|Server|master$/'